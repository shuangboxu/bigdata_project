import argparse
import os
from datetime import datetime
from html import escape
from pathlib import Path
from typing import TypedDict, Any, Dict, Iterable, cast

from langgraph.graph import StateGraph

from agent_flow.executor import DataExecutor
from agent_flow.planner import DataPlanner
from agent_flow.reporter import Reporter
from agent_flow.utils import load_data
from agent_flow.visualizer import Visualizer


class WorkflowState(TypedDict, total=False):
    data: Any
    plan: Any
    metrics: Any
    model: Any
    roc_path: str
    report_text: str
    html_path: str


def _pick_data_path(passed: str | None) -> str:
    candidates = [
        passed,
        os.getenv("DATA_FILE"),
        os.getenv("WORKFLOW_DATA"),
        "data/数据示例.xlsx",
    ]
    for candidate in candidates:
        if candidate and Path(candidate).exists():
            return candidate
    raise FileNotFoundError(
        "Unable to locate input data. Pass --data, set DATA_FILE/WORKFLOW_DATA, "
        "or place the file at data/数据示例.xlsx."
    )


def _format_metrics(metrics: Dict[str, Any], keys: Iterable[str]) -> str:
    rows = []
    for key in keys:
        value = metrics.get(key)
        if value is None:
            continue
        rows.append(f"<tr><th>{escape(str(key))}</th><td>{escape(str(value))}</td></tr>")
    class_counts = metrics.get("class_counts")
    if isinstance(class_counts, dict) and class_counts:
        rows.append(
            "<tr><th>class_counts</th><td>"
            f"{escape(', '.join(f'{k}: {v}' for k, v in class_counts.items()))}</td></tr>"
        )
    return "\n".join(rows)


def _render_html_summary(state: WorkflowState, out_path: str) -> str:
    plan_steps = state.get("plan", {}).get("steps", [])
    metrics = state.get("metrics", {}) or {}
    report_md = state.get("report_text", "")
    roc_path = state.get("roc_path")

    out_file = Path(out_path)
    out_file.parent.mkdir(parents=True, exist_ok=True)

    if roc_path:
        roc_location = Path(roc_path)
        if not roc_location.is_absolute():
            roc_location = (Path.cwd() / roc_location).resolve()
        try:
            rel_roc = roc_location.relative_to(out_file.parent.resolve())
        except ValueError:
            rel_roc = Path(os.path.relpath(roc_location, out_file.parent.resolve()))
        roc_href = rel_roc.as_posix()
    else:
        roc_href = ""

    html_content = f"""<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <title>LangGraph Workflow Summary</title>
  <style>
    body {{ font-family: Arial, sans-serif; margin: 2rem; line-height: 1.6; }}
    h1 {{ color: #213547; }}
    section {{ margin-bottom: 2rem; }}
    ol {{ padding-left: 1.2rem; }}
    table {{ border-collapse: collapse; min-width: 320px; }}
    th, td {{ border: 1px solid #d0d7de; padding: 0.5rem; text-align: left; }}
    th {{ background-color: #f6f8fa; }}
    pre {{ background: #f8f9fa; padding: 1rem; overflow-x: auto; }}
    figure {{ margin: 0; }}
    figcaption {{ font-size: 0.9rem; color: #555; margin-top: 0.5rem; }}
  </style>
</head>
<body>
  <h1>LangGraph Agent Workflow</h1>
  <p>Generated on {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}</p>

  <section>
    <h2>Execution Plan</h2>
"""
    if plan_steps:
        steps_html = "\n".join(f"      <li>{escape(str(step))}</li>" for step in plan_steps)
        html_content += f"    <ol>\n{steps_html}\n    </ol>\n"
    else:
        html_content += "    <p>No plan details captured.</p>\n"

    html_content += "  </section>\n\n  <section>\n    <h2>Model Metrics</h2>\n"
    metric_rows = _format_metrics(metrics, ["auc", "n_train", "n_test", "target_col"])
    if metric_rows:
        html_content += f"    <table>\n{metric_rows}\n    </table>\n"
    else:
        html_content += "    <p>No metrics reported.</p>\n"
    html_content += "  </section>\n\n"

    if roc_href:
        html_content += f"""  <section>
    <h2>Artifacts</h2>
    <figure>
      <img src="{escape(roc_href)}" alt="ROC Curve" style="max-width: 640px; width: 100%;" />
      <figcaption>ROC curve generated by the visualizer.</figcaption>
    </figure>
  </section>

"""
    if report_md:
        html_content += f"""  <section>
    <h2>LLM Report (Markdown)</h2>
    <pre>{escape(report_md)}</pre>
  </section>

"""

    html_content += """</body>
</html>
"""
    out_file.write_text(html_content, encoding="utf-8")
    print(f"[Workflow] HTML summary saved -> {out_file}")
    return str(out_file)


def run(data_path: str | None = None, html_out: str | None = None) -> WorkflowState:
    resolved_data = _pick_data_path(data_path)
    print(f"[Workflow] Loading dataset -> {resolved_data}")
    df = load_data(resolved_data)

    graph = StateGraph(WorkflowState)

    planner = DataPlanner()
    executor = DataExecutor()
    visualizer = Visualizer()
    reporter = Reporter()

    graph.add_node("planner", planner)
    graph.add_node("executor", executor)
    graph.add_node("visualizer", visualizer)
    graph.add_node("reporter", reporter)

    graph.add_edge("planner", "executor")
    graph.add_edge("executor", "visualizer")
    graph.add_edge("visualizer", "reporter")

    graph.set_entry_point("planner")
    graph.set_finish_point("reporter")

    app = graph.compile()
    print("[Workflow] Starting LangGraph pipeline...")
    result = cast(WorkflowState, app.invoke({"data": df}))
    print("[Workflow] Finished.")

    auc = result.get("metrics", {}).get("auc")
    if auc is not None:
        print(f"[Workflow] Reported AUC: {auc:.4f}" if isinstance(auc, float) else f"[Workflow] Reported AUC: {auc}")

    html_target = html_out or os.getenv("WORKFLOW_HTML", "reports/workflow_overview.html")
    result["html_path"] = _render_html_summary(result, html_target)
    return result


def _parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(description="Execute the LangGraph agent workflow end-to-end.")
    parser.add_argument(
        "--data",
        dest="data",
        help="Path to the input Excel/CSV file. Defaults to DATA_FILE env or data/数据示例.xlsx.",
    )
    parser.add_argument(
        "--html-out",
        dest="html_out",
        help="Path to write the HTML summary. Defaults to WORKFLOW_HTML env or reports/workflow_overview.html.",
    )
    return parser.parse_args()


if __name__ == "__main__":
    args = _parse_args()
    run(data_path=args.data, html_out=args.html_out)
